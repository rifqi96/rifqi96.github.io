---
description: Guidelines for the Editor component and its extensions. Use this whenever we need to make edits on the Editor component.
globs: 
alwaysApply: false
---
# Editor Development Guidelines

1. Core Principles
Tiptap-Based: Understand Tiptap's core concepts (nodes, marks, extensions).
Extension-Driven: Implement features and modifications as Tiptap extensions.
2. Extension Structure
Location: components/Editor/extensions/.
Naming: Descriptive names (e.g., ImageGalleryBlock, SpokenQuoteText).
Implementation: Each extension is a separate file exporting a Tiptap extension object.
Node Views: Use VueNodeViewRenderer for complex content blocks with Vue components.
Registration: Register extensions in getAllExtensions in components/ui/StoryEditor/extensions/index.ts.
3. Extension Types and Patterns
Node Extensions (Block-Level):
Define block-level elements.
Use VueNodeViewRenderer to render Vue components.
Define attributes for styling and data.
Example: BoxedText.extension.ts
Mark Extensions (Inline Styles):
Extend the base TextStyle extension.
Add attributes for styling (e.g., fontSize).
Add commands to apply/remove attributes.
Example: TextStyleExtended.extension.ts
Utility Extensions:
Modify editor behavior or add functionality.
Customize placeholder behavior.
Example: PlaceholderExtended.extension.ts
4. Key Considerations
Props: Use component props (extensions, editable, options) for customization.
Data Flow: modelValue is the single source of truth. Use setContent to update the editor.
Styling: Use SCSS and :deep() selectors for Tiptap elements.
Performance: Optimize updates and lazy-load resources.
Accessibility: Ensure keyboard navigation and screen reader support.
5. Example Extension Analysis
BoxedText: A Node extension that renders a styled container using a Vue component (BoxedText.vue). It defines attributes for background color, border color, and corner radius.
TextStyleExtended: A Mark extension that extends the base TextStyle extension to add font size styling. It provides commands to set and unset the font size.
PlaceholderExtended: A utility extension that customizes the placeholder text based on the node type. It uses a function to determine the appropriate placeholder text for each node.